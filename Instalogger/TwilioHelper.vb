''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' File: TwilioHelper.vb
''' Author: Jay Lagorio
''' Date Changed: 31OCT2020
''' Purpose: A class to handle the interaction between the project and Twilio. Abstracts away the
''' need to wait for data to arrive, how to retrieve and delete SMS messages to handle Two Factor
''' Authentication.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Imports Twilio
Imports Twilio.Base
Imports Twilio.Rest.Api.V2010.Account

''' <summary>
''' A class to handle the interaction between the project and Twilio. Abstracts away the need to wait for
''' data to arrive, how to retrieve and delete SMS messages to handle Two Factor Authentication.
''' </summary>
Public Class TwilioHelper
    ' One second wait period between checking for new SMS messages to read or delete
    Private Const MESSAGE_CHECK_PERIOD_MILLISECONDS As Integer = 1000

    ' The Account SID is required to make calls to Twilio
    Private pAccountSid As String

    ' The account's Authentication Token is required to authenticate the app
    Private pAuthToken As String

    ' The phone number is used to filter which messages to check in case there's more than one phone
    ' number associated with the account
    Private pPhoneNumber As String

    ''' <summary>
    ''' Constructor that takes the minimum required information to manage the Twilio interface
    ''' </summary>
    ''' <param name="AccountSid">Account SID provided by Twilio</param>
    ''' <param name="AuthToken">Authentication Token generated by Twilio</param>
    ''' <param name="PhoneNumber">The phone number in your Twilio account to receive SMS messages</param>
    Sub New(ByVal AccountSid As String, ByVal AuthToken As String, ByVal PhoneNumber As String)
        pAccountSid = AccountSid
        pAuthToken = AuthToken
        pPhoneNumber = PhoneNumber

        ' Initialize the Twilio client
        Call TwilioClient.Init(pAccountSid, pAuthToken)
    End Sub


    ''' <summary>
    ''' Check for the most recent SMS received by the account and delete it once it's retrieved.
    ''' </summary>
    ''' <returns>Returns the body text of the most recent SMS received by the account. there aren't any messages it returns
    ''' an empty string.</returns>
    Public Async Function GetMostRecentSMSAsync() As Task(Of String)
        Return Await GetMostRecentSMSAsync(False)
    End Function


    ''' <summary>
    ''' Check for the most recent SMS received by the account and delete it once it's retrieved.
    ''' </summary>
    ''' <param name="WaitForMessages">Specifies to wait for a new message to arrive if the account is empty.</param>
    ''' <returns>Returns the body text of the most recent SMS received by the account. If WaitForMessages is False and
    ''' there aren't any messages it returns an empty string.</returns>
    Public Async Function GetMostRecentSMSAsync(ByVal WaitForMessages As Boolean) As Task(Of String)
        ' Check for messages in the account
        Dim Messages As ResourceSet(Of MessageResource) = Await MessageResource.ReadAsync(pAccountSid, pPhoneNumber)

        ' If we're supposed to wait for a message to arrive, do that
        If WaitForMessages Then
            While Messages.Count = 0
                Threading.Thread.Sleep(MESSAGE_CHECK_PERIOD_MILLISECONDS)
                Messages = Await MessageResource.ReadAsync(pAccountSid, pPhoneNumber)
            End While
        End If

        ' If messages are in the account get the body text of the most recent one
        ' and then delete it
        Dim MessageBody As String = ""
        If Messages.Count > 0 Then
            MessageBody = Messages(0).Body
            Await MessageResource.DeleteAsync(Messages(0).Sid)
        End If

        Return MessageBody
    End Function


    ''' <summary>
    ''' Counts the SMS messages waiting to be picked up.
    ''' </summary>
    ''' <returns>An Integer specifying the number of incomming SMS messages in the phone number</returns>
    Public Async Function GetSMSCountAsync() As Task(Of Integer)
        Return (Await MessageResource.ReadAsync(pAccountSid, pPhoneNumber)).Count
    End Function


    ''' <summary>
    ''' Looks for SMS messages at the specified phone number and then attempts to delete all of them.
    ''' </summary>
    ''' <returns>True if all messages are deleted, False if any one deletion fails. If there are no messages in the account
    ''' it returns True to indicate the account is empty.</returns>
    Public Async Function DeleteAllSMSAsync() As Task(Of Boolean)
        Return Await DeleteAllSMSAsync(False)
    End Function


    ''' <summary>
    ''' Looks for SMS messages at the specified phone number and then attempts to delete all of them. Optionally it
    ''' can block while waiting for messages to arrive.
    ''' </summary>
    ''' <param name="WaitForMessages">Determines whether the function blocks while waiting for messages to arrive</param>
    ''' <returns>True if all messages are deleted, False if any one deletion fails. If there are no messages in the account
    ''' and you don't wait for new ones it returns True to indicate the account is empty.</returns>
    Public Async Function DeleteAllSMSAsync(ByVal WaitForMessages As Boolean) As Task(Of Boolean)
        ' If you want to wait for messages to arrive, this will wait for GetSMSCountAsync() to return something
        ' greater than 0. There's no fail out period for this.
        If WaitForMessages Then
            Dim MessageCount As Integer = Await GetSMSCountAsync()
            If MessageCount = 0 Then
                Await Task.Delay(MESSAGE_CHECK_PERIOD_MILLISECONDS)
                MessageCount = Await GetSMSCountAsync()
            End If
        End If

        ' Assume all of the messages can be deleted successfully
        Dim Success As Boolean = True

        ' Gather the messages at the phone number specified
        Dim Messages As ResourceSet(Of MessageResource) = Await MessageResource.ReadAsync(pAccountSid, pPhoneNumber)
        For i = 0 To Messages.Count - 1
            ' Attempt deletion, noting a failure if there are any
            If Not Await MessageResource.DeleteAsync(Messages(i).Sid) Then
                Success = False
            End If
        Next

        ' Return whether there were any failures in deleting messages
        Return Success
    End Function
End Class
